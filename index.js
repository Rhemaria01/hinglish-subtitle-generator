const {
  TranscribeClient,
  StartTranscriptionJobCommand,
  GetTranscriptionJobCommand,
} = require("@aws-sdk/client-transcribe");
const { OpenAI } = require("openai");
const region = "ap-southeast-1";

const {
  getObjectURL,
  getFile,
  timeout,
  parseSRT,
  addToFile,
  createDir,
} = require("./utils");
require("dotenv").config({ override: true });
const ffmpeg = require("fluent-ffmpeg");

const credentials = {
  accessKeyId: process.env.AWS_ACCESS_KEY,
  secretAccessKey: process.env.AWS_SECRET_KEY,
};

//testing files

const testingFiles = [
  {
    index: 0,
    TranscriptionJobName: "hin_eng_min_transcription_srtFormat",
    videoFileKey: "hin_eng_min.mp4",
  },
  {
    index: 1,
    TranscriptionJobName: "video_02_transcription_srtFormat",
    videoFileKey: "standup_video_4mins.mp4",
  },
  {
    index: 2,
    TranscriptionJobName: "full_hindi_14mins_subtitle",
    videoFileKey: "full_hindi_14mins.mp4",
  },
  {
    index: 3,
    TranscriptionJobName: "old_movie_clip_9mins_subtitle",
    videoFileKey: "old_movie_clip_9mins.mp4",
  },
  {
    index: 4,
    TranscriptionJobName: "hin_reactRoadmap_30Mins_subtitle",
    videoFileKey: "hin_reactRoadmap_30Mins.mp4",
  },
];

//element of testing files
let testIndex = 4;

//video file and subtitle names
const videoFileKey = testingFiles[testIndex].videoFileKey;
const hinglishSubFileName = `hinglish_srt/${testingFiles[testIndex].TranscriptionJobName}.srt`;

const input = {
  TranscriptionJobName: testingFiles[testIndex].TranscriptionJobName,
  Media: {
    MediaFileUri: `s3://transcription-xyz/${videoFileKey}`,
  },
  OutputBucketName: "transcription-xyz",
  OutputKey: "transcriptions/",
  IdentifyLanguage: true,
  LanguageOptions: ["hi-IN", "en-US"],
  Subtitles: {
    Formats: ["srt"],
    OutputStartIndex: 1,
  },
};

//name of subtitle file on S3
const fileKey = `${input.OutputKey}${input.TranscriptionJobName}`;

async function main() {
  //if job already exists in aws than skip using startTranscription function and use this instead:
  // const srtFile = await getFile(`${fileKey}.srt`, region, credentials);

  const srtFile = await startTranscriptionRequest();

  console.log("Sending original transcription to openai.");
  const hinglishTranscription = await getHinglishTranscription(srtFile);

  // adding sorted hinglish transcription to subtitle file
  addToFile(hinglishSubFileName, hinglishTranscription);
  await timeout(1000);

  console.log("Adding subtitles to video");
  await addSrtToVideo(hinglishSubFileName);

  console.log("Completed");
}

// Get the video file from S3 Bucket and Start a transcription job for that file
async function startTranscriptionRequest() {
  console.log("Starting Transcription");
  const transcribeConfig = {
    region,
    credentials,
  };
  const transcribeClient = new TranscribeClient(transcribeConfig);
  const transcribeCommand = new StartTranscriptionJobCommand(input);
  const completionStatus = ["COMPLETED", "FAILED"];

  try {
    const transcribeResponse = await transcribeClient.send(transcribeCommand);
    console.log("Transcription job created, the details:");
    console.log(transcribeResponse.TranscriptionJob);
  } catch (err) {
    console.log(err);
    throw new Error(err);
  }

  //polling for transcription job to end
  while (true) {
    const getTranscriptionCommand = new GetTranscriptionJobCommand({
      TranscriptionJobName: input.TranscriptionJobName,
    });
    const status = await transcribeClient.send(getTranscriptionCommand);
    if (
      completionStatus.includes(status.TranscriptionJob.TranscriptionJobStatus)
    ) {
      console.log("Transcribtion Job Completed, getting srt file from aws");

      //getting the new subtitle file created by aws transcribe
      const srtFile = await getFile(`${fileKey}.srt`, region, credentials);
      return srtFile;
    }
    await timeout(5000);
    console.log("Re-checking...");
  }
}

const client = new OpenAI();

//Send the transcription generated by aws to openai to make convert it into hinglish.
async function getHinglishTranscription(awsTranscription) {
  // awsTranscription = await readFileToString(
  //   "transcriptions/full_hindi_14mins_subtitle.srt"
  // ).then((content) => {
  //   return content;
  // });
  awsTranscription = parseSRT(awsTranscription);

  let count = 0;
  const result = [];
  await Promise.all(
    awsTranscription.map(async (transcription, index) => {
      count++;
      console.log("Sending to openai:", count);

      let hinglishTranscription = await client.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `Convert the following transcription provide by user this into Hinglish transcription, Output should be in SRT format.
Do not use Code block in your answer.   
Format the answer as follows: 
1
00:00:00,119 --> 00:00:00,879
Hinglish Transcription

2
00:00:02,700 --> 00:00:03,779
Hinglish Transcription

3
00:00:04,119 --> 00:00:04,879
Hinglish Transcription

4
00:00:05,700 --> 00:00:05,779
Hinglish Transcription

Do Not Miss any segment and convert the complete file. 
Convert Hindi Words to Hinglish and let english words be english only.
Convert each and every word.
          `,
          },
          {
            role: "user",
            content: transcription,
          },
        ],
      });

      result.push({
        index,
        srt: hinglishTranscription.choices[0].message.content + "\n\n",
      });
    })
  );
  console.log(
    "All the requests are completed, sorting and returning the hinglish subtitles."
  );
  return result
    .sort((a, b) => a.index - b.index)
    .reduce((acc, { srt }) => acc + srt, "");
}

//Fetches the video from S3 bucket, adds subtitles to it and saves it locally.
async function addSrtToVideo(srt) {
  const videoURL = await getObjectURL(videoFileKey, region, credentials);

  ffmpeg(videoURL)
    .outputOptions(`-vf subtitles=${srt}`)
    .on("error", function (err) {
      console.log(err);
    })
    .save(`hinglish_videos/Hinglish_${videoFileKey}`);
}

createDir("hinglish_srt");
createDir("hinglish_videos");
main();
